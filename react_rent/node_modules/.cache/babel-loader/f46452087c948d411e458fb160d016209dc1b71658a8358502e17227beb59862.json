{"ast":null,"code":"import { reject } from 'lodash';\nimport { useState, useEffect } from 'react';\nimport { axiosAPI as axios } from './axios.js';\nconst TOKEN_NAME = 'hkzf_city';\nconst getCurrentCity = () => {\n  // 获取本地存储的城市\n  const localCity = localStorage.getItem(TOKEN_NAME);\n  if (!localCity) {\n    return new Promise((resolve, reject) => {\n      // 本地存储信息不存在时通过定位获取城市信息\n      const currentCity = new window.BMapGL.LocalCity();\n      currentCity.get(async res => {\n        try {\n          const result = await axios.get(`/area/info?name=${res.name}`);\n          localStorage.setItem(TOKEN_NAME, JSON.stringify(result.data.body));\n          resolve(result.data.body);\n        } catch (e) {\n          reject(e);\n        }\n      });\n      // currentCity.get()\n    });\n  } else {\n    return Promise.resolve(localCity);\n  }\n};\ngetCurrentCity();\n// 自定义获取当前城市的hook\n\nconst getCity = () => {\n  JSON.parse(localStorage.getItem(TOKEN_NAME));\n};\nconst setCity = value => {\n  localStorage.setItem(TOKEN_NAME, value);\n};","map":{"version":3,"names":["reject","useState","useEffect","axiosAPI","axios","TOKEN_NAME","getCurrentCity","localCity","localStorage","getItem","Promise","resolve","currentCity","window","BMapGL","LocalCity","get","res","result","name","setItem","JSON","stringify","data","body","e","getCity","parse","setCity","value"],"sources":["E:/Github/react_rent/react_rent/src/utils/city.js"],"sourcesContent":["import { reject } from 'lodash'\r\nimport {useState,useEffect} from 'react'\r\nimport {axiosAPI as axios} from './axios.js'\r\n\r\nconst TOKEN_NAME = 'hkzf_city'\r\n\r\n\r\nconst getCurrentCity = ()=>{\r\n  // 获取本地存储的城市\r\n  const localCity = localStorage.getItem(TOKEN_NAME)\r\n  if(!localCity){\r\n    return new Promise((resolve,reject)=>{\r\n      // 本地存储信息不存在时通过定位获取城市信息\r\n      const currentCity = new window.BMapGL.LocalCity();\r\n      currentCity.get(async (res)=>{\r\n        try{\r\n          const result = await axios.get(`/area/info?name=${res.name}`)\r\n          localStorage.setItem(TOKEN_NAME,JSON.stringify(result.data.body))\r\n          resolve(result.data.body)\r\n        }catch(e){\r\n          reject(e)\r\n        }\r\n      })\r\n      // currentCity.get()\r\n    })\r\n  }else{\r\n    return Promise.resolve(localCity)\r\n  }\r\n}\r\ngetCurrentCity()\r\n// 自定义获取当前城市的hook\r\n\r\n\r\nconst getCity = ()=>{JSON.parse(localStorage.getItem(TOKEN_NAME))}\r\n\r\nconst setCity = (value)=>{localStorage.setItem(TOKEN_NAME,value)}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAAQC,QAAQ,EAACC,SAAS,QAAO,OAAO;AACxC,SAAQC,QAAQ,IAAIC,KAAK,QAAO,YAAY;AAE5C,MAAMC,UAAU,GAAG,WAAW;AAG9B,MAAMC,cAAc,GAAG,MAAI;EACzB;EACA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAACJ,UAAU,CAAC;EAClD,IAAG,CAACE,SAAS,EAAC;IACZ,OAAO,IAAIG,OAAO,CAAC,CAACC,OAAO,EAACX,MAAM,KAAG;MACnC;MACA,MAAMY,WAAW,GAAG,IAAIC,MAAM,CAACC,MAAM,CAACC,SAAS,EAAE;MACjDH,WAAW,CAACI,GAAG,CAAC,MAAOC,GAAG,IAAG;QAC3B,IAAG;UACD,MAAMC,MAAM,GAAG,MAAMd,KAAK,CAACY,GAAG,CAAE,mBAAkBC,GAAG,CAACE,IAAK,EAAC,CAAC;UAC7DX,YAAY,CAACY,OAAO,CAACf,UAAU,EAACgB,IAAI,CAACC,SAAS,CAACJ,MAAM,CAACK,IAAI,CAACC,IAAI,CAAC,CAAC;UACjEb,OAAO,CAACO,MAAM,CAACK,IAAI,CAACC,IAAI,CAAC;QAC3B,CAAC,QAAMC,CAAC,EAAC;UACPzB,MAAM,CAACyB,CAAC,CAAC;QACX;MACF,CAAC,CAAC;MACF;IACF,CAAC,CAAC;EACJ,CAAC,MAAI;IACH,OAAOf,OAAO,CAACC,OAAO,CAACJ,SAAS,CAAC;EACnC;AACF,CAAC;AACDD,cAAc,EAAE;AAChB;;AAGA,MAAMoB,OAAO,GAAG,MAAI;EAACL,IAAI,CAACM,KAAK,CAACnB,YAAY,CAACC,OAAO,CAACJ,UAAU,CAAC,CAAC;AAAA,CAAC;AAElE,MAAMuB,OAAO,GAAIC,KAAK,IAAG;EAACrB,YAAY,CAACY,OAAO,CAACf,UAAU,EAACwB,KAAK,CAAC;AAAA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}