{"ast":null,"code":"var _jsxFileName = \"E:\\\\Github\\\\react_rent\\\\react_rent\\\\src\\\\pages\\\\Map\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './index.css';\nimport { useCity } from '../../utils/city';\nimport { Toast } from 'antd-mobile';\nimport { axiosAPI as axios } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BMapGL = window.BMapGL;\nexport default function Map() {\n  _s();\n  // 设置小屋房源列表\n  const [houseList, setHouseList] = useState([]);\n  // 获取当前城市\n  const [cityValue, cityLabel] = useCity();\n  useEffect(() => {\n    // 创建地图\n    const map = new BMapGL.Map('container');\n    // 渲染地图函数\n    const renderMap = () => {\n      // 设置鼠标的滚动缩放地图\n      map.enableScrollWheelZoom(true);\n      // 设置比例尺控件\n      var scaleCtrl = new BMapGL.ScaleControl();\n      // 设置缩放控件\n      var zoomCtrl = new BMapGL.ZoomControl();\n      // 添加比例尺控件\n      map.addControl(scaleCtrl);\n      // 添加缩放控件\n      map.addControl(zoomCtrl);\n      // 创建地址解析器\n      var myGeo = new BMapGL.Geocoder();\n      // 将地址解析结果显示在地图上\n      myGeo.getPoint(cityLabel, async point => {\n        if (point) {\n          // 地图定位当前城市\n          map.centerAndZoom(point, 11);\n          // 渲染房源覆盖物\n          renderOverLays(cityValue);\n        }\n      }, cityLabel);\n    };\n    // 获取房源信息 覆盖物渲染函数\n    const renderOverLays = async value => {\n      //加载提示\n      Toast.show({\n        icon: 'loading',\n        content: '加载中...'\n      });\n      // 获取房源信息\n      const result = await axios.get(`/area/map?id=${value}`);\n      // 获取缩放级别\n      const {\n        nextZoom,\n        type\n      } = getTypeAndZoom(map);\n      // setHouseList(result.data.body)\n      result.data.body.forEach(item => {\n        return createOverLays(item, nextZoom, type);\n      });\n      Toast.clear();\n    };\n    renderMap();\n    // 覆盖物渲染函数  判断渲染级别\n    const createOverLays = (item, nextZoom, type) => {\n      const {\n        label: areaName,\n        count,\n        coord,\n        value\n      } = item;\n      const {\n        latitude,\n        longitude\n      } = coord;\n      // 设置房源信息覆盖物位置\n      const areaPoint = new BMapGL.Point(longitude, latitude);\n      // 按照类型判断是渲染区镇还是小区\n      if (type === 'circle') {\n        createCircle(count, value, areaName, areaPoint, nextZoom);\n      } else {\n        createRect(count, value, areaName, areaPoint);\n      }\n    };\n\n    // 覆盖渲染物  绘制区镇信息\n    const createCircle = (count, value, areaName, areaPoint, nextZoom) => {\n      // 添加文本标注\n      var opts = {\n        position: areaPoint,\n        offset: new BMapGL.Size(-35, -35)\n      };\n      // 创建覆盖物实例\n      var label = new BMapGL.Label('', opts);\n      // 设置覆盖物内容\n      label.setContent(`<div class=\"bubble\">\n      <p class='name'>${areaName}</p>\n      <p class='count'>${count}套</p>\n      </div>`);\n      // 设置覆盖物样式\n      label.setStyle(labelStyle);\n      // 设置覆盖物点击事件\n      label.addEventListener('click', () => {\n        // 放大被点击的覆盖物\n        map.centerAndZoom(areaPoint, nextZoom);\n        // 清空原有的覆盖物\n        map.clearOverlays();\n        // 寻找下一级覆盖物\n        renderOverLays(value);\n      });\n      // 添加覆盖物\n      map.addOverlay(label);\n    };\n    // 覆盖渲染物 绘制小区房源信息\n    const createRect = (count, value, label, areaPoint) => {\n      //添加文本标注\n      var opts = {\n        position: areaPoint,\n        offset: new BMapGL.Size(-35, -35)\n      };\n      // 创建覆盖物实例\n      var label = new BMapGL.Label('', opts);\n      // 设置覆盖物内容\n      label.setContent(`\n        <div class='desc'>\n          \n        </div>\n      `);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n// 地图覆盖物样式\n_s(Map, \"DWPfIBg08Cf44YFW6n+inkh6Y9s=\", false, function () {\n  return [useCity];\n});\n_c = Map;\nconst labelStyle = {\n  width: '70px',\n  height: '70px',\n  cursor: 'pointer',\n  backgroundColor: '',\n  border: '0px solid rgb(255, 0, 0)',\n  padding: '0px',\n  whiteSpace: 'nowrap',\n  fontSize: '12px',\n  color: 'rgb(255, 255, 255)',\n  textAlign: 'center'\n};\n// 设置缩放级别函数\nconst getTypeAndZoom = map => {\n  const zoom = map.getZoom();\n  let nextZoom, type;\n  if (zoom >= 10 && zoom < 11) {\n    nextZoom = 13;\n    type = 'circle';\n  } else if (zoom >= 11 && zoom < 15) {\n    nextZoom = 15;\n    type = 'circle';\n  } else if (zoom >= 14 && zoom < 16) {\n    type = 'rect';\n  }\n  return {\n    nextZoom,\n    type\n  };\n};\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useState","useCity","Toast","axiosAPI","axios","BMapGL","window","Map","houseList","setHouseList","cityValue","cityLabel","map","renderMap","enableScrollWheelZoom","scaleCtrl","ScaleControl","zoomCtrl","ZoomControl","addControl","myGeo","Geocoder","getPoint","point","centerAndZoom","renderOverLays","value","show","icon","content","result","get","nextZoom","type","getTypeAndZoom","data","body","forEach","item","createOverLays","clear","label","areaName","count","coord","latitude","longitude","areaPoint","Point","createCircle","createRect","opts","position","offset","Size","Label","setContent","setStyle","labelStyle","addEventListener","clearOverlays","addOverlay","width","height","cursor","backgroundColor","border","padding","whiteSpace","fontSize","color","textAlign","zoom","getZoom"],"sources":["E:/Github/react_rent/react_rent/src/pages/Map/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './index.css'\r\nimport { useCity } from '../../utils/city'\r\nimport { Toast } from 'antd-mobile'\r\nimport { axiosAPI as axios } from '../../utils'\r\nconst BMapGL = window.BMapGL\r\nexport default function Map() {\r\n  // 设置小屋房源列表\r\n  const [houseList, setHouseList] = useState([])\r\n  // 获取当前城市\r\n  const [cityValue, cityLabel] = useCity()\r\n  useEffect(() => {\r\n    // 创建地图\r\n    const map = new BMapGL.Map('container')\r\n    // 渲染地图函数\r\n    const renderMap = () => {\r\n      // 设置鼠标的滚动缩放地图\r\n      map.enableScrollWheelZoom(true)\r\n      // 设置比例尺控件\r\n      var scaleCtrl = new BMapGL.ScaleControl()\r\n      // 设置缩放控件\r\n      var zoomCtrl = new BMapGL.ZoomControl()\r\n      // 添加比例尺控件\r\n      map.addControl(scaleCtrl)\r\n      // 添加缩放控件\r\n      map.addControl(zoomCtrl)\r\n      // 创建地址解析器\r\n      var myGeo = new BMapGL.Geocoder()\r\n      // 将地址解析结果显示在地图上\r\n      myGeo.getPoint(\r\n        cityLabel,\r\n        async (point) => {\r\n          if (point) {\r\n            // 地图定位当前城市\r\n            map.centerAndZoom(point, 11)\r\n            // 渲染房源覆盖物\r\n            renderOverLays(cityValue)\r\n          }\r\n        },\r\n        cityLabel\r\n      )\r\n    }\r\n    // 获取房源信息 覆盖物渲染函数\r\n    const renderOverLays = async (value) => {\r\n      //加载提示\r\n      Toast.show({\r\n        icon: 'loading',\r\n        content: '加载中...'\r\n      })\r\n      // 获取房源信息\r\n      const result = await axios.get(`/area/map?id=${value}`)\r\n      // 获取缩放级别\r\n      const { nextZoom, type } = getTypeAndZoom(map)\r\n      // setHouseList(result.data.body)\r\n      result.data.body.forEach((item) => {\r\n        return createOverLays(item, nextZoom, type)\r\n      })\r\n\r\n      Toast.clear()\r\n    }\r\n    renderMap()\r\n    // 覆盖物渲染函数  判断渲染级别\r\n    const createOverLays = (item, nextZoom, type) => {\r\n      const { label: areaName, count, coord, value } = item\r\n      const { latitude, longitude } = coord\r\n      // 设置房源信息覆盖物位置\r\n      const areaPoint = new BMapGL.Point(longitude, latitude)\r\n      // 按照类型判断是渲染区镇还是小区\r\n      if (type === 'circle') {\r\n        createCircle(count, value, areaName, areaPoint, nextZoom)\r\n      } else {\r\n        createRect(count, value, areaName, areaPoint)\r\n      }\r\n    }\r\n\r\n    // 覆盖渲染物  绘制区镇信息\r\n    const createCircle = (count, value, areaName, areaPoint, nextZoom) => {\r\n      // 添加文本标注\r\n      var opts = {\r\n        position: areaPoint,\r\n        offset: new BMapGL.Size(-35, -35)\r\n      }\r\n      // 创建覆盖物实例\r\n      var label = new BMapGL.Label('', opts)\r\n      // 设置覆盖物内容\r\n      label.setContent(`<div class=\"bubble\">\r\n      <p class='name'>${areaName}</p>\r\n      <p class='count'>${count}套</p>\r\n      </div>`)\r\n      // 设置覆盖物样式\r\n      label.setStyle(labelStyle)\r\n      // 设置覆盖物点击事件\r\n      label.addEventListener('click',()=>{\r\n        // 放大被点击的覆盖物\r\n        map.centerAndZoom(areaPoint,nextZoom)\r\n        // 清空原有的覆盖物\r\n        map.clearOverlays()\r\n        // 寻找下一级覆盖物\r\n        renderOverLays(value)\r\n      })\r\n      // 添加覆盖物\r\n      map.addOverlay(label);\r\n    }\r\n    // 覆盖渲染物 绘制小区房源信息\r\n    const createRect = (count, value, label, areaPoint) => {\r\n      //添加文本标注\r\n      var opts = {\r\n        position:areaPoint,\r\n        offset:new BMapGL.Size(-35, -35)\r\n      }\r\n      // 创建覆盖物实例\r\n      var label = new BMapGL.Label('', opts)\r\n      // 设置覆盖物内容\r\n      label.setContent(`\r\n        <div class='desc'>\r\n          \r\n        </div>\r\n      `)\r\n    }\r\n  })\r\n  return (\r\n    <div className=\"map\">\r\n      {/* 地图容器 */}\r\n      <div id=\"container\"></div>\r\n    </div>\r\n  )\r\n}\r\n// 地图覆盖物样式\r\nconst labelStyle = {\r\n    width:'70px',\r\n    height:'70px',\r\n    cursor: 'pointer',\r\n    backgroundColor:'',\r\n    border: '0px solid rgb(255, 0, 0)',\r\n    padding: '0px',\r\n    whiteSpace: 'nowrap',\r\n    fontSize: '12px',\r\n    color: 'rgb(255, 255, 255)',\r\n    textAlign: 'center'\r\n}\r\n// 设置缩放级别函数\r\nconst getTypeAndZoom = (map) => {\r\n  const zoom = map.getZoom()\r\n  let nextZoom, type\r\n  if (zoom >= 10 && zoom < 11) {\r\n    nextZoom = 13\r\n    type = 'circle'\r\n  } else if (zoom >= 11 && zoom < 15) {\r\n    nextZoom = 15\r\n    type = 'circle'\r\n  } else if (zoom >= 14 && zoom < 16) {\r\n    type = 'rect'\r\n  }\r\n\r\n  return { nextZoom, type }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}