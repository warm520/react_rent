"use strict";

var _react = _interopRequireDefault(require("react"));
var _testing = require("testing");
var _index = _interopRequireDefault(require("../index"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const classPrefix = `adm-image`;
const demoSrc = 'https://images.unsplash.com/photo-1567945716310-4745a6b7844b?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=60';
describe('Image', () => {
  test('onContainerClick can work', () => {
    const onContainerClick = jest.fn();
    const {
      getByTestId
    } = (0, _testing.render)(_react.default.createElement(_index.default, {
      src: demoSrc,
      onContainerClick: onContainerClick,
      "data-testid": 'img'
    }));
    _testing.fireEvent.click(getByTestId('img'));
    expect(onContainerClick).toBeCalledTimes(1);
  });
  test('load successfully', () => {
    (0, _testing.render)(_react.default.createElement(_index.default, {
      src: demoSrc
    }));
    const img = document.querySelectorAll(`.${classPrefix}-img`)[0];
    _testing.fireEvent.load(img);
    expect(img).toHaveAttribute('src', demoSrc);
  });
  test('load failed', () => {
    (0, _testing.render)(_react.default.createElement(_index.default, {
      src: '404'
    }));
    const img = document.querySelectorAll(`.${classPrefix}-img`)[0];
    _testing.fireEvent.error(img);
    expect(img).not.toBeInTheDocument();
    expect(document.querySelectorAll(`.${classPrefix}-tip`)[0]).toBeInTheDocument();
  });
  test('lazy load should be work', () => {
    // mock useInViewport
    // https://github.com/alibaba/hooks/blob/master/packages/hooks/src/useInViewport/__tests__/index.test.ts
    const mockIntersectionObserver = jest.fn().mockReturnValue({
      observe: () => null,
      disconnect: () => null
    });
    window.IntersectionObserver = mockIntersectionObserver;
    (0, _testing.render)(_react.default.createElement(_index.default, {
      src: demoSrc,
      lazy: true
    }));
    const img = document.querySelectorAll(`.${classPrefix}-img`)[0];
    expect(img).not.toHaveAttribute('src');
    const calls = mockIntersectionObserver.mock.calls;
    const [onChange] = calls[calls.length - 1];
    (0, _testing.act)(() => {
      onChange([{
        isIntersecting: true
      }]);
    });
    expect(img).toHaveAttribute('src', demoSrc);
  });
  test('renders with width and height', () => {
    const {
      getByTestId
    } = (0, _testing.render)(_react.default.createElement(_index.default, {
      src: demoSrc,
      width: 100,
      height: 100,
      "data-testid": 'image'
    }));
    expect(getByTestId('image')).toHaveStyle('--width: 100px;--height: 100px');
  });
});